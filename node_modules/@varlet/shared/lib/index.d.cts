declare const uniq: (arr: Array<any>) => any[];
declare const normalizeToArray: <T>(value: T | T[]) => T[];
declare const removeItem: <T>(arr: T[], item: T) => T[] | undefined;
declare const toggleItem: <T>(arr: T[], item: T) => T[];
declare const removeArrayBlank: <T>(arr: (T | null | undefined)[]) => T[];
declare const find: <T>(arr: T[], callback: (item: T, index: number, array: T[]) => any, from?: 'start' | 'end') => [T, number] | [null, -1];
type ClassName = string | undefined | null;
type Classes = (ClassName | [any, ClassName, ClassName?])[];
declare const classes: (...classes: Classes) => any[];

declare const getGlobalThis: () => typeof globalThis;
declare const requestAnimationFrame: (fn: FrameRequestCallback) => number;
declare const cancelAnimationFrame: (handle: number) => void;
declare const raf: () => Promise<unknown>;
declare const doubleRaf: () => Promise<unknown>;
declare const getStyle: (element: Element) => CSSStyleDeclaration;
declare const getRect: (element: Element | Window) => DOMRect;
declare const inViewport: (element: HTMLElement) => boolean;
declare const toDataURL: (file: File) => Promise<string>;
declare const preventDefault: (event: Event) => void;
declare const getScrollTop: (element: Element | Window) => number;
declare const getScrollLeft: (element: Element | Window) => number;

declare const debounce: (fn: any, delay?: number) => (this: unknown, ...args: any[]) => void;
declare const throttle: (fn: any, delay?: number) => (() => void);
declare function call<P extends any[], R>(fn?: ((...arg: P) => R) | ((...arg: P) => R)[] | null, ...args: P): R | R[] | undefined;

declare const isString: (val: unknown) => val is string;
declare const isBoolean: (val: unknown) => val is boolean;
declare const isNumber: (val: unknown) => val is number;
declare const isNumeric: (val: unknown) => val is string | number;
declare const isPlainObject: (val: unknown) => val is Record<string, any>;
declare const isObject: (val: unknown) => val is Record<string, any>;
declare const isFunction: (val: unknown) => val is Function;
declare const isArray: (val: unknown) => val is any[];
declare const isURL: (val: string | undefined | null) => boolean;
declare const isEmpty: (val: unknown) => boolean;
declare const isWindow: (val: unknown) => val is Window;
declare const supportTouch: () => boolean;
declare const inBrowser: () => boolean;
declare const hasOwn: (val: object, key: string | symbol) => key is never;

declare const toNumber: (val: number | string | boolean | undefined | null) => number;
declare const clamp: (num: number, min: number, max: number) => number;
declare const clampArrayRange: (index: number, arr: Array<unknown>) => number;

declare const bigCamelize: (s: string) => string;
declare const camelize: (s: string) => string;
declare const kebabCase: (s: string) => string;
type BEM<S extends string | undefined, N extends string, NC extends string> = S extends undefined ? NC : S extends `$--${infer CM}` ? `${N}--${CM}` : S extends `--${infer M}` ? `${NC}--${M}` : `${NC}__${S}`;
declare function createNamespaceFn<N extends string>(namespace: N): <C extends string>(name: C) => {
    name: string;
    n: <S extends string | undefined = undefined>(suffix?: S | undefined) => BEM<S, N, `${N}-${C}`>;
    classes: (...classes: Classes) => any[];
};

export { BEM, ClassName, Classes, bigCamelize, call, camelize, cancelAnimationFrame, clamp, clampArrayRange, classes, createNamespaceFn, debounce, doubleRaf, find, getGlobalThis, getRect, getScrollLeft, getScrollTop, getStyle, hasOwn, inBrowser, inViewport, isArray, isBoolean, isEmpty, isFunction, isNumber, isNumeric, isObject, isPlainObject, isString, isURL, isWindow, kebabCase, normalizeToArray, preventDefault, raf, removeArrayBlank, removeItem, requestAnimationFrame, supportTouch, throttle, toDataURL, toNumber, toggleItem, uniq };
