var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
import VarIcon from "../icon/index.mjs";
import { defineComponent, ref, watch, computed } from "vue";
import { doubleRaf, raf } from "@varlet/shared";
import { createNamespace, formatElevation } from "../utils/components.mjs";
import { useCollapse } from "./provide.mjs";
import { props } from "./props.mjs";
const { name, n, classes } = createNamespace("collapse-item");
import { normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";
function __render__(_ctx, _cache) {
  const _component_var_icon = _resolveComponent("var-icon");
  return _openBlock(), _createElementBlock(
    "div",
    {
      class: _normalizeClass(_ctx.classes(_ctx.n(), [_ctx.offset && _ctx.isShow, _ctx.n("--active")], [_ctx.disabled, _ctx.n("--disable")])),
      style: _normalizeStyle(`--collapse-divider-top: ${_ctx.divider ? "var(--collapse-border-top)" : "none"}`)
    },
    [
      _createElementVNode(
        "div",
        {
          class: _normalizeClass(_ctx.classes(_ctx.n("shadow"), _ctx.formatElevation(_ctx.elevation, 2)))
        },
        null,
        2
        /* CLASS */
      ),
      _createElementVNode(
        "div",
        {
          class: _normalizeClass(_ctx.n("header")),
          onClick: _cache[0] || (_cache[0] = (...args) => _ctx.toggle && _ctx.toggle(...args))
        },
        [
          _createElementVNode(
            "div",
            {
              class: _normalizeClass(_ctx.n("header-title"))
            },
            [
              _renderSlot(_ctx.$slots, "title", {}, () => [
                _createTextVNode(
                  _toDisplayString(_ctx.title),
                  1
                  /* TEXT */
                )
              ])
            ],
            2
            /* CLASS */
          ),
          _createElementVNode(
            "div",
            {
              class: _normalizeClass(_ctx.n("header-icon"))
            },
            [
              _renderSlot(_ctx.$slots, "icon", {}, () => [
                _createVNode(_component_var_icon, {
                  name: _ctx.icon,
                  transition: 250,
                  class: _normalizeClass(
                    _ctx.classes(
                      _ctx.n("header-icon"),
                      [_ctx.isShow && _ctx.icon === "chevron-down", _ctx.n("header-open")],
                      [_ctx.disabled, _ctx.n("header--disable")]
                    )
                  )
                }, null, 8, ["name", "class"])
              ])
            ],
            2
            /* CLASS */
          )
        ],
        2
        /* CLASS */
      ),
      _withDirectives(_createElementVNode(
        "div",
        {
          class: _normalizeClass(_ctx.n("content")),
          ref: "contentEl",
          onTransitionend: _cache[1] || (_cache[1] = (...args) => _ctx.transitionend && _ctx.transitionend(...args)),
          onTransitionstart: _cache[2] || (_cache[2] = (...args) => _ctx.start && _ctx.start(...args))
        },
        [
          _createElementVNode(
            "div",
            {
              class: _normalizeClass(_ctx.n("content-wrap"))
            },
            [
              _renderSlot(_ctx.$slots, "default")
            ],
            2
            /* CLASS */
          )
        ],
        34
        /* CLASS, HYDRATE_EVENTS */
      ), [
        [_vShow, _ctx.showContent]
      ])
    ],
    6
    /* CLASS, STYLE */
  );
}
const __sfc__ = defineComponent({
  name,
  components: {
    VarIcon
  },
  props,
  setup(props2) {
    const isShow = ref(false);
    const showContent = ref(false);
    const contentEl = ref(null);
    const name2 = computed(() => props2.name);
    const disabled = computed(() => props2.disabled);
    const { index, collapse, bindCollapse } = useCollapse();
    const { offset, divider, elevation, updateItem } = collapse;
    const collapseItemProvider = {
      index,
      name: name2,
      disabled,
      init
    };
    let isInitToTrigger = true;
    watch(isShow, (value) => {
      value ? openPanel() : closePanel();
    });
    bindCollapse(collapseItemProvider);
    function openPanel() {
      return __async(this, null, function* () {
        if (!contentEl.value) {
          return;
        }
        contentEl.value.style.height = "";
        showContent.value = true;
        yield raf();
        if (!contentEl.value) {
          return;
        }
        const { offsetHeight } = contentEl.value;
        contentEl.value.style.height = "0px";
        yield raf();
        if (!contentEl.value) {
          return;
        }
        contentEl.value.style.height = offsetHeight + "px";
        if (!isInitToTrigger) {
          return;
        }
        yield doubleRaf();
        if (isInitToTrigger) {
          transitionend();
        }
      });
    }
    function closePanel() {
      return __async(this, null, function* () {
        if (!contentEl.value) {
          return;
        }
        const { offsetHeight } = contentEl.value;
        contentEl.value.style.height = offsetHeight + "px";
        yield raf();
        contentEl.value.style.height = "0px";
      });
    }
    function init(show) {
      isShow.value = show;
    }
    function toggle() {
      var _a;
      if (props2.disabled) {
        return;
      }
      updateItem((_a = props2.name) != null ? _a : index.value, !isShow.value);
    }
    function start() {
      isInitToTrigger = false;
    }
    function transitionend() {
      if (!isShow.value) {
        showContent.value = false;
      }
      contentEl.value.style.height = "";
    }
    return {
      isShow,
      showContent,
      offset,
      divider,
      elevation,
      contentEl,
      n,
      start,
      classes,
      toggle,
      transitionend,
      formatElevation
    };
  }
});
__sfc__.render = __render__;
var stdin_default = __sfc__;
export {
  stdin_default as default
};
