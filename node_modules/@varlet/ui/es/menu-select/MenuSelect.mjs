import VarMenu from "../menu/index.mjs";
import { defineComponent, computed, ref } from "vue";
import { props } from "./props.mjs";
import { createNamespace, formatElevation } from "../utils/components.mjs";
import { useMenuOptions } from "./provide.mjs";
import { useSelectController } from "../select/useSelectController.mjs";
import { call } from "@varlet/shared";
import { useVModel } from "@varlet/use";
const { name, n, classes } = createNamespace("menu-select");
import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from "vue";
function __render__(_ctx, _cache) {
  const _component_var_menu = _resolveComponent("var-menu");
  return _openBlock(), _createBlock(_component_var_menu, {
    ref: "menu",
    class: _normalizeClass(_ctx.n()),
    disabled: _ctx.disabled,
    trigger: _ctx.trigger,
    reference: _ctx.reference,
    placement: _ctx.placement,
    strategy: _ctx.strategy,
    "offset-x": _ctx.offsetX,
    "offset-y": _ctx.offsetY,
    teleport: _ctx.teleport,
    "same-width": _ctx.sameWidth,
    elevation: _ctx.elevation,
    "default-style": false,
    "popover-class": _ctx.popoverClass,
    "close-on-click-reference": _ctx.closeOnClickReference,
    show: _ctx.show,
    "onUpdate:show": _cache[0] || (_cache[0] = ($event) => _ctx.show = $event),
    onOpen: _ctx.onOpen,
    onOpened: _ctx.onOpened,
    onClose: _ctx.onClose,
    onClosed: _ctx.onClosed,
    onClickOutside: _ctx.onClickOutside
  }, {
    menu: _withCtx(() => [
      _createElementVNode(
        "div",
        {
          class: _normalizeClass(_ctx.classes(_ctx.n("menu"), _ctx.formatElevation(_ctx.elevation, 3), [_ctx.scrollable, _ctx.n("--scrollable")]))
        },
        [
          _renderSlot(_ctx.$slots, "options")
        ],
        2
        /* CLASS */
      )
    ]),
    default: _withCtx(() => [
      _renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
    /* FORWARDED */
  }, 8, ["class", "disabled", "trigger", "reference", "placement", "strategy", "offset-x", "offset-y", "teleport", "same-width", "elevation", "popover-class", "close-on-click-reference", "show", "onOpen", "onOpened", "onClose", "onClosed", "onClickOutside"]);
}
const __sfc__ = defineComponent({
  name,
  components: { VarMenu },
  props,
  setup(props2) {
    const menu = ref(null);
    const show = useVModel(props2, "show");
    const { menuOptions, length, bindMenuOptions } = useMenuOptions();
    const { computeLabel, getSelectedValue } = useSelectController({
      modelValue: () => props2.modelValue,
      multiple: () => props2.multiple,
      optionProviders: () => menuOptions,
      optionProvidersLength: () => length.value
    });
    const menuSelectProvider = {
      size: computed(() => props2.size),
      multiple: computed(() => props2.multiple),
      computeLabel,
      onSelect
    };
    bindMenuOptions(menuSelectProvider);
    function onSelect(option) {
      const { multiple, closeOnSelect } = props2;
      call(props2["onUpdate:modelValue"], getSelectedValue(option));
      if (!multiple && closeOnSelect) {
        show.value = false;
      }
    }
    function open() {
      var _a;
      (_a = menu.value) == null ? void 0 : _a.open();
    }
    function close() {
      var _a;
      (_a = menu.value) == null ? void 0 : _a.close();
    }
    function resize() {
      var _a;
      (_a = menu.value) == null ? void 0 : _a.resize();
    }
    return {
      show,
      menu,
      n,
      classes,
      formatElevation,
      open,
      close,
      resize
    };
  }
});
__sfc__.render = __render__;
var stdin_default = __sfc__;
export {
  stdin_default as default
};
