import VarIcon from "../icon/index.mjs";
import { defineComponent, ref, onUpdated, computed } from "vue";
import { props } from "./props.mjs";
import { isEmpty, getStyle, call } from "@varlet/shared";
import { createNamespace } from "../utils/components.mjs";
import { onWindowResize, onSmartMounted } from "@varlet/use";
const { name, n, classes } = createNamespace("field-decorator");
import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock, Teleport as _Teleport, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";
const _withScopeId = (n2) => (_pushScopeId(""), n2 = n2(), _popScopeId(), n2);
const _hoisted_1 = ["for"];
function __render__(_ctx, _cache) {
  const _component_var_icon = _resolveComponent("var-icon");
  return _openBlock(), _createElementBlock(
    "div",
    {
      class: _normalizeClass(_ctx.classes(_ctx.n(), _ctx.n("$--box"), _ctx.n(`--${_ctx.variant}`), [_ctx.size === "small", _ctx.n("--small")], [_ctx.disabled, _ctx.n("--disabled")])),
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
    },
    [
      _createElementVNode(
        "div",
        {
          class: _normalizeClass(
            _ctx.classes(
              _ctx.n("controller"),
              [_ctx.isFocus, _ctx.n("--focus")],
              [_ctx.errorMessage, _ctx.n("--error")],
              [_ctx.formDisabled || _ctx.disabled, _ctx.n("--disabled")]
            )
          ),
          style: _normalizeStyle({
            color: _ctx.color,
            cursor: _ctx.cursor,
            overflow: _ctx.isFloating ? "visible" : "hidden"
          })
        },
        [
          _createElementVNode(
            "div",
            {
              class: _normalizeClass(_ctx.classes(_ctx.n("icon"), [!_ctx.hint, _ctx.n("--icon-non-hint")]))
            },
            [
              _renderSlot(_ctx.$slots, "prepend-icon")
            ],
            2
            /* CLASS */
          ),
          _createElementVNode(
            "div",
            {
              class: _normalizeClass(_ctx.classes(_ctx.n("middle"), [!_ctx.hint, _ctx.n("--middle-non-hint")]))
            },
            [
              _renderSlot(_ctx.$slots, "default")
            ],
            2
            /* CLASS */
          ),
          _ctx.placeholder && _ctx.hint ? (_openBlock(), _createElementBlock("label", {
            key: 0,
            class: _normalizeClass(
              _ctx.classes(
                _ctx.n("placeholder"),
                _ctx.n("$--ellipsis"),
                [_ctx.isFocus, _ctx.n("--focus")],
                [_ctx.formDisabled || _ctx.disabled, _ctx.n("--disabled")],
                [_ctx.errorMessage, _ctx.n("--error")],
                _ctx.computePlaceholderState()
              )
            ),
            style: _normalizeStyle({
              color: _ctx.color
            }),
            for: _ctx.id
          }, [
            _createElementVNode(
              "span",
              null,
              _toDisplayString(_ctx.placeholder),
              1
              /* TEXT */
            )
          ], 14, _hoisted_1)) : _createCommentVNode("v-if", true),
          _createElementVNode(
            "div",
            {
              class: _normalizeClass(_ctx.classes(_ctx.n("icon"), [!_ctx.hint, _ctx.n("--icon-non-hint")]))
            },
            [
              _ctx.clearable && !_ctx.isEmpty(_ctx.value) ? (_openBlock(), _createBlock(_component_var_icon, {
                key: 0,
                class: _normalizeClass(_ctx.n("clear-icon")),
                "var-field-decorator-cover": "",
                name: "close-circle",
                onClick: _ctx.handleClear
              }, null, 8, ["class", "onClick"])) : _createCommentVNode("v-if", true),
              _renderSlot(_ctx.$slots, "append-icon")
            ],
            2
            /* CLASS */
          )
        ],
        6
        /* CLASS, STYLE */
      ),
      _ctx.line ? (_openBlock(), _createElementBlock(
        _Fragment,
        { key: 0 },
        [
          _ctx.variant === "outlined" ? (_openBlock(), _createElementBlock(
            "fieldset",
            {
              key: 0,
              class: _normalizeClass(
                _ctx.classes(
                  _ctx.n("line"),
                  [_ctx.isFocus, _ctx.n("--line-focus")],
                  [_ctx.errorMessage, _ctx.n("--line-error")],
                  [_ctx.formDisabled || _ctx.disabled, _ctx.n("--line-disabled")]
                )
              ),
              style: _normalizeStyle({ borderColor: _ctx.color })
            },
            [
              _createElementVNode(
                "legend",
                {
                  class: _normalizeClass(_ctx.classes(_ctx.n("line-legend"), [_ctx.isFloating, _ctx.n("line-legend--hint")])),
                  style: _normalizeStyle({ width: _ctx.legendWidth })
                },
                [
                  _ctx.placeholder && _ctx.hint ? (_openBlock(), _createBlock(_Teleport, {
                    key: 0,
                    to: "body"
                  }, [
                    _createElementVNode(
                      "span",
                      {
                        ref: "placeholderTextEl",
                        class: _normalizeClass(
                          _ctx.classes(_ctx.n("placeholder-text"), _ctx.n("$--ellipsis"), [_ctx.size === "small", _ctx.n("placeholder-text--small")])
                        )
                      },
                      _toDisplayString(_ctx.placeholder),
                      3
                      /* TEXT, CLASS */
                    )
                  ])) : _createCommentVNode("v-if", true)
                ],
                6
                /* CLASS, STYLE */
              )
            ],
            6
            /* CLASS, STYLE */
          )) : (_openBlock(), _createElementBlock(
            "div",
            {
              key: 1,
              class: _normalizeClass(_ctx.classes(_ctx.n("line"), [_ctx.formDisabled || _ctx.disabled, _ctx.n("--line-disabled")], [_ctx.errorMessage, _ctx.n("--line-error")])),
              style: _normalizeStyle({ background: !_ctx.errorMessage ? _ctx.blurColor : void 0 })
            },
            [
              _createElementVNode(
                "div",
                {
                  class: _normalizeClass(
                    _ctx.classes(
                      _ctx.n("dot"),
                      [_ctx.isFocus, _ctx.n("--line-focus")],
                      [_ctx.formDisabled || _ctx.disabled, _ctx.n("--line-disabled")],
                      [_ctx.errorMessage, _ctx.n("--line-error")]
                    )
                  ),
                  style: _normalizeStyle({ background: !_ctx.errorMessage ? _ctx.focusColor : void 0 })
                },
                null,
                6
                /* CLASS, STYLE */
              )
            ],
            6
            /* CLASS, STYLE */
          ))
        ],
        64
        /* STABLE_FRAGMENT */
      )) : _createCommentVNode("v-if", true)
    ],
    2
    /* CLASS */
  );
}
const __sfc__ = defineComponent({
  name,
  components: { VarIcon },
  props,
  setup(props2, { slots }) {
    const placeholderTextEl = ref(null);
    const legendWidth = ref("");
    const isFloating = computed(() => props2.hint && (!isEmpty(props2.value) || props2.isFocus || slots["prepend-icon"]));
    const color = computed(
      () => !props2.errorMessage ? props2.isFocus ? props2.focusColor : props2.blurColor : void 0
    );
    onWindowResize(resize);
    onSmartMounted(resize);
    onUpdated(resize);
    function computePlaceholderState() {
      const { hint, value, composing } = props2;
      if (!hint && (!isEmpty(value) || composing)) {
        return n("--placeholder-hidden");
      }
      if (isFloating.value) {
        return n("--placeholder-hint");
      }
    }
    function resize() {
      const { size, hint, variant, placeholder } = props2;
      if (!placeholder || !hint || variant !== "outlined") {
        legendWidth.value = "";
        return;
      }
      const placeholderTextStyle = getStyle(placeholderTextEl.value);
      const placeholderSpace = `var(--field-decorator-outlined-${size}-placeholder-space)`;
      legendWidth.value = `calc(${placeholderTextStyle.width} * 0.75 + ${placeholderSpace} * 2)`;
    }
    function handleClear(e) {
      call(props2.onClear, e);
    }
    function handleClick(e) {
      call(props2.onClick, e);
    }
    return {
      placeholderTextEl,
      color,
      legendWidth,
      isFloating,
      computePlaceholderState,
      n,
      classes,
      isEmpty,
      handleClear,
      handleClick
    };
  }
});
__sfc__.render = __render__;
var stdin_default = __sfc__;
export {
  stdin_default as default
};
