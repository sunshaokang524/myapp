var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import { withDirectives as _withDirectives, mergeProps as _mergeProps, vShow as _vShow, createVNode as _createVNode } from "vue";
import { defineComponent, watch, Transition, Teleport, computed } from "vue";
import { props } from "./props.mjs";
import { useLock } from "../context/lock.mjs";
import { useZIndex } from "../context/zIndex.mjs";
import { useRouteListener, useTeleport, createNamespace } from "../utils/components.mjs";
import { usePopupItems } from "./provide.mjs";
import { useInitialized } from "@varlet/use";
import { call } from "@varlet/shared";


const {
  name,
  n,
  classes
} = createNamespace("popup");
var stdin_default = defineComponent({
  name,
  inheritAttrs: false,
  props,
  setup(props2, {
    slots,
    attrs
  }) {
    const rendered = useInitialized(() => props2.show, true);
    const {
      zIndex
    } = useZIndex(() => props2.show, 3);
    const {
      disabled
    } = useTeleport();
    const {
      bindPopupItems
    } = usePopupItems();
    useLock(() => props2.show, () => props2.lockScroll);
    watch(() => props2.show, (newValue) => {
      newValue ? call(props2.onOpen) : call(props2.onClose);
    });
    bindPopupItems({
      show: computed(() => props2.show)
    });
    useRouteListener(() => call(props2.onRouteChange));
    function hidePopup() {
      const {
        closeOnClickOverlay,
        onClickOverlay
      } = props2;
      call(onClickOverlay);
      if (!closeOnClickOverlay) {
        return;
      }
      call(props2["onUpdate:show"], false);
    }
    function renderOverlay() {
      const {
        overlayClass = "",
        overlayStyle
      } = props2;
      return _createVNode("div", {
        "class": classes(n("overlay"), overlayClass),
        "style": __spreadValues({
          zIndex: zIndex.value - 1
        }, overlayStyle),
        "onClick": hidePopup
      }, null);
    }
    function renderContent() {
      return _withDirectives(_createVNode("div", _mergeProps({
        "class": classes(n("content"), n(`--${props2.position}`), [props2.defaultStyle, n("--content-background-color")], [props2.defaultStyle, n("$-elevation--3")], [props2.safeArea, n("--safe-area")], [props2.safeAreaTop, n("--safe-area-top")]),
        "style": {
          zIndex: zIndex.value
        }
      }, attrs), [rendered.value && call(slots.default)]), [[_vShow, props2.show]]);
    }
    function renderPopup() {
      return _createVNode(Transition, {
        "name": n("$-fade"),
        "onAfterEnter": props2.onOpened,
        "onAfterLeave": props2.onClosed
      }, {
        default: () => [_withDirectives(_createVNode("div", {
          "class": classes(n("$--box"), n()),
          "style": {
            zIndex: zIndex.value - 2
          }
        }, [props2.overlay && renderOverlay(), _createVNode(Transition, {
          "name": props2.transition || n(`$-pop-${props2.position}`)
        }, {
          default: () => [renderContent()]
        })]), [[_vShow, props2.show]])]
      });
    }
    return () => {
      const {
        teleport
      } = props2;
      if (teleport) {
        return _createVNode(Teleport, {
          "to": teleport,
          "disabled": disabled.value
        }, {
          default: () => [renderPopup()]
        });
      }
      return renderPopup();
    };
  }
});
export {
  stdin_default as default
};
