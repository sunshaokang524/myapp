import Ripple from "../ripple/index.mjs";
import VarPopup from "../popup/index.mjs";
import VarIcon from "../icon/index.mjs";
import { defineComponent, ref, watch } from "vue";
import { props } from "./props.mjs";
import { pack } from "../locale/index.mjs";
import { createNamespace } from "../utils/components.mjs";
import { call } from "@varlet/shared";
const { name, n, classes } = createNamespace("action-sheet");
import { renderSlot as _renderSlot, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, resolveDirective as _resolveDirective, withDirectives as _withDirectives, mergeProps as _mergeProps, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";
const _withScopeId = (n2) => (_pushScopeId(""), n2 = n2(), _popScopeId(), n2);
const _hoisted_1 = ["onClick"];
function __render__(_ctx, _cache) {
  const _component_var_icon = _resolveComponent("var-icon");
  const _component_var_popup = _resolveComponent("var-popup");
  const _directive_ripple = _resolveDirective("ripple");
  return _openBlock(), _createBlock(_component_var_popup, _mergeProps({
    class: _ctx.n("popup-radius"),
    position: "bottom",
    show: _ctx.popupShow,
    overlay: _ctx.overlay,
    "overlay-class": _ctx.overlayClass,
    "overlay-style": _ctx.overlayStyle,
    "lock-scroll": _ctx.lockScroll,
    "close-on-click-overlay": _ctx.closeOnClickOverlay,
    teleport: _ctx.teleport,
    "safe-area": _ctx.safeArea
  }, {
    "onUpdate:show": _ctx.handlePopupUpdateShow
  }, {
    onOpen: _ctx.onOpen,
    onClose: _ctx.onClose,
    onClosed: _ctx.onClosed,
    onOpened: _ctx.onOpened,
    onRouteChange: _ctx.onRouteChange
  }), {
    default: _withCtx(() => [
      _createElementVNode(
        "div",
        _mergeProps({
          class: _ctx.classes(_ctx.n(), _ctx.n("$--box"))
        }, _ctx.$attrs),
        [
          _renderSlot(_ctx.$slots, "title", {}, () => {
            var _a;
            return [
              _createElementVNode(
                "div",
                {
                  class: _normalizeClass(_ctx.n("title"))
                },
                _toDisplayString((_a = _ctx.title) != null ? _a : _ctx.pack.actionSheetTitle),
                3
                /* TEXT, CLASS */
              )
            ];
          }),
          _renderSlot(_ctx.$slots, "actions", {}, () => [
            (_openBlock(true), _createElementBlock(
              _Fragment,
              null,
              _renderList(_ctx.actions, (action) => {
                return _withDirectives((_openBlock(), _createElementBlock("div", {
                  class: _normalizeClass(_ctx.classes(_ctx.n("action-item"), action.className, [action.disabled, _ctx.n("--disabled")])),
                  key: action.name,
                  style: _normalizeStyle({ color: action.color }),
                  onClick: ($event) => _ctx.handleSelect(action)
                }, [
                  action.icon ? (_openBlock(), _createBlock(_component_var_icon, {
                    key: 0,
                    class: _normalizeClass(_ctx.n("action-icon")),
                    "var-action-sheet-cover": "",
                    namespace: action.namespace,
                    name: action.icon,
                    size: action.iconSize
                  }, null, 8, ["class", "namespace", "name", "size"])) : _createCommentVNode("v-if", true),
                  _createElementVNode(
                    "div",
                    {
                      class: _normalizeClass(_ctx.n("action-name"))
                    },
                    _toDisplayString(action.name),
                    3
                    /* TEXT, CLASS */
                  )
                ], 14, _hoisted_1)), [
                  [_directive_ripple, { disabled: action.disabled }]
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ],
        16
        /* FULL_PROPS */
      )
    ]),
    _: 3
    /* FORWARDED */
  }, 16, ["class", "show", "overlay", "overlay-class", "overlay-style", "lock-scroll", "close-on-click-overlay", "teleport", "safe-area", "onOpen", "onClose", "onClosed", "onOpened", "onRouteChange"]);
}
const __sfc__ = defineComponent({
  name,
  directives: { Ripple },
  components: {
    VarPopup,
    VarIcon
  },
  inheritAttrs: false,
  props,
  setup(props2) {
    const popupShow = ref(false);
    watch(
      () => props2.show,
      (newValue) => {
        popupShow.value = newValue;
      },
      { immediate: true }
    );
    function handleSelect(action) {
      if (action.disabled) {
        return;
      }
      const { closeOnClickAction, onSelect } = props2;
      call(onSelect, action);
      closeOnClickAction && call(props2["onUpdate:show"], false);
    }
    function handlePopupUpdateShow(value) {
      call(props2["onUpdate:show"], value);
    }
    return {
      popupShow,
      pack,
      n,
      classes,
      handlePopupUpdateShow,
      handleSelect
    };
  }
});
__sfc__.render = __render__;
var stdin_default = __sfc__;
export {
  stdin_default as default
};
