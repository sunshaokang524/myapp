import { defineComponent, ref, computed, watch } from "vue";
import { isPlainObject, toNumber, call } from "@varlet/shared";
import { props } from "./props.mjs";
import { useRow } from "./provide.mjs";
import { padStartFlex, toSizeUnit } from "../utils/elements.mjs";
import { createNamespace } from "../utils/components.mjs";
const { name, n, classes } = createNamespace("col");
import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";
function __render__(_ctx, _cache) {
  return _openBlock(), _createElementBlock(
    "div",
    {
      class: _normalizeClass(
        _ctx.classes(
          _ctx.n(),
          _ctx.n("$--box"),
          [_ctx.span >= 0, _ctx.n(`--span-${_ctx.span}`)],
          [_ctx.offset, _ctx.n(`--offset-${_ctx.offset}`)],
          ..._ctx.getSize("xs", _ctx.xs),
          ..._ctx.getSize("sm", _ctx.sm),
          ..._ctx.getSize("md", _ctx.md),
          ..._ctx.getSize("lg", _ctx.lg),
          ..._ctx.getSize("xl", _ctx.xl)
        )
      ),
      style: _normalizeStyle({
        flexDirection: _ctx.direction,
        justifyContent: _ctx.padStartFlex(_ctx.justify),
        alignItems: _ctx.padStartFlex(_ctx.align),
        paddingLeft: _ctx.toSizeUnit(_ctx.padding.left),
        paddingRight: _ctx.toSizeUnit(_ctx.padding.right),
        paddingTop: _ctx.toSizeUnit(_ctx.padding.top),
        paddingBottom: _ctx.toSizeUnit(_ctx.padding.bottom)
      }),
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
    },
    [
      _renderSlot(_ctx.$slots, "default")
    ],
    6
    /* CLASS, STYLE */
  );
}
const __sfc__ = defineComponent({
  name,
  props,
  setup(props2) {
    const span = computed(() => toNumber(props2.span));
    const offset = computed(() => toNumber(props2.offset));
    const padding = ref({ left: 0, right: 0, top: 0, bottom: 0 });
    const { row, bindRow } = useRow();
    const colProvider = {
      setPadding(pad) {
        padding.value = pad;
      }
    };
    watch([() => props2.span, () => props2.offset], () => {
      row == null ? void 0 : row.computePadding();
    });
    call(bindRow, colProvider);
    function getSize(mode, size) {
      const classes2 = [];
      if (size == null) {
        return classes2;
      }
      if (isPlainObject(size)) {
        const { offset: offset2, span: span2 } = size;
        Number(span2) >= 0 && classes2.push(n(`--span-${mode}-${span2}`));
        offset2 && classes2.push(n(`--offset-${mode}-${offset2}`));
      } else {
        Number(size) >= 0 && classes2.push(n(`--span-${mode}-${size}`));
      }
      return classes2;
    }
    function handleClick(e) {
      call(props2.onClick, e);
    }
    return {
      span,
      offset,
      padding,
      n,
      classes,
      toNumber,
      toSizeUnit,
      getSize,
      handleClick,
      padStartFlex
    };
  }
});
__sfc__.render = __render__;
var stdin_default = __sfc__;
export {
  stdin_default as default
};
