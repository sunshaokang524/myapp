import VarFormDetails from "../form-details/index.mjs";
import Ripple from "../ripple/index.mjs";
import Hover from "../hover/index.mjs";
import VarHoverOverlay, { useHoverOverlay } from "../hover-overlay/index.mjs";
import { defineComponent, computed, nextTick } from "vue";
import { useValidation, createNamespace } from "../utils/components.mjs";
import { multiplySizeUnit } from "../utils/elements.mjs";
import { useForm } from "../form/provide.mjs";
import { props } from "./props.mjs";
import { call } from "@varlet/shared";
const { name, n, classes } = createNamespace("switch");
import { normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, resolveDirective as _resolveDirective, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";
const _withScopeId = (n2) => (_pushScopeId(""), n2 = n2(), _popScopeId(), n2);
const _hoisted_1 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ _createElementVNode(
  "svg",
  { viewBox: "25 25 50 50" },
  [
    /* @__PURE__ */ _createElementVNode("circle", {
      cx: "50",
      cy: "50",
      r: "20",
      fill: "none"
    })
  ],
  -1
  /* HOISTED */
));
const _hoisted_2 = [
  _hoisted_1
];
function __render__(_ctx, _cache) {
  const _component_var_hover_overlay = _resolveComponent("var-hover-overlay");
  const _component_var_form_details = _resolveComponent("var-form-details");
  const _directive_ripple = _resolveDirective("ripple");
  const _directive_hover = _resolveDirective("hover");
  return _withDirectives((_openBlock(), _createElementBlock(
    "div",
    {
      class: _normalizeClass(_ctx.n())
    },
    [
      _createElementVNode(
        "div",
        {
          class: _normalizeClass(_ctx.classes(_ctx.n("block"), [_ctx.disabled || _ctx.formDisabled, _ctx.n("--disabled")])),
          onClick: _cache[0] || (_cache[0] = (...args) => _ctx.switchActive && _ctx.switchActive(...args)),
          style: _normalizeStyle(_ctx.styleComputed.switch)
        },
        [
          _createElementVNode(
            "div",
            {
              style: _normalizeStyle(_ctx.styleComputed.track),
              class: _normalizeClass(
                _ctx.classes(_ctx.n("track"), [_ctx.modelValue === _ctx.activeValue, _ctx.n("track--active")], [_ctx.errorMessage, _ctx.n("track--error")])
              )
            },
            null,
            6
            /* CLASS, STYLE */
          ),
          _withDirectives((_openBlock(), _createElementBlock(
            "div",
            {
              class: _normalizeClass(_ctx.classes(_ctx.n("ripple"), [_ctx.modelValue === _ctx.activeValue, _ctx.n("ripple--active")])),
              style: _normalizeStyle(_ctx.styleComputed.ripple)
            },
            [
              _createElementVNode(
                "div",
                {
                  style: _normalizeStyle(_ctx.styleComputed.handle),
                  class: _normalizeClass(
                    _ctx.classes(
                      _ctx.n("handle"),
                      _ctx.n("$-elevation--2"),
                      [_ctx.modelValue === _ctx.activeValue, _ctx.n("handle--active")],
                      [_ctx.errorMessage, _ctx.n("handle--error")]
                    )
                  )
                },
                [
                  _ctx.loading ? (_openBlock(), _createElementBlock(
                    "span",
                    {
                      key: 0,
                      class: _normalizeClass(_ctx.n("loading")),
                      style: _normalizeStyle({
                        width: _ctx.radius,
                        height: _ctx.radius
                      })
                    },
                    _hoisted_2,
                    6
                    /* CLASS, STYLE */
                  )) : _createCommentVNode("v-if", true)
                ],
                6
                /* CLASS, STYLE */
              ),
              _createVNode(_component_var_hover_overlay, { hovering: _ctx.hovering }, null, 8, ["hovering"])
            ],
            6
            /* CLASS, STYLE */
          )), [
            [_directive_ripple, {
              disabled: !_ctx.ripple || _ctx.disabled || _ctx.loading || _ctx.formDisabled
            }]
          ])
        ],
        6
        /* CLASS, STYLE */
      ),
      _createVNode(_component_var_form_details, { "error-message": _ctx.errorMessage }, null, 8, ["error-message"])
    ],
    2
    /* CLASS */
  )), [
    [_directive_hover, _ctx.hover, "desktop"]
  ]);
}
const __sfc__ = defineComponent({
  name,
  components: {
    VarFormDetails,
    VarHoverOverlay
  },
  directives: { Ripple, Hover },
  props,
  setup(props2) {
    const { bindForm, form } = useForm();
    const { errorMessage, validateWithTrigger: vt, validate: v, resetValidation } = useValidation();
    const { hovering, handleHovering } = useHoverOverlay();
    const styleComputed = computed(() => {
      const { size, modelValue, color, closeColor, loadingColor, activeValue } = props2;
      return {
        handle: {
          width: multiplySizeUnit(size),
          height: multiplySizeUnit(size),
          backgroundColor: modelValue === activeValue ? color : closeColor,
          color: loadingColor
        },
        ripple: {
          left: modelValue === activeValue ? multiplySizeUnit(size, 0.5) : `-${multiplySizeUnit(size, 0.5)}`,
          color: modelValue === activeValue ? color : closeColor || "#999",
          width: multiplySizeUnit(size, 2),
          height: multiplySizeUnit(size, 2)
        },
        track: {
          height: multiplySizeUnit(size, 0.72),
          width: multiplySizeUnit(size, 1.9),
          borderRadius: multiplySizeUnit(size, 2 / 3),
          filter: modelValue === activeValue || (errorMessage == null ? void 0 : errorMessage.value) ? void 0 : "brightness(.6)",
          backgroundColor: modelValue === activeValue ? color : closeColor
        },
        switch: {
          height: multiplySizeUnit(size, 1.2),
          width: multiplySizeUnit(size, 2)
        }
      };
    });
    const radius = computed(() => multiplySizeUnit(props2.size, 0.8));
    const switchProvider = {
      reset,
      validate,
      resetValidation
    };
    call(bindForm, switchProvider);
    function validate() {
      return v(props2.rules, props2.modelValue);
    }
    function validateWithTrigger() {
      return nextTick(() => vt(["onChange"], "onChange", props2.rules, props2.modelValue));
    }
    function switchActive(event) {
      const {
        onClick,
        onChange,
        disabled,
        loading,
        readonly,
        modelValue,
        activeValue,
        inactiveValue,
        "onUpdate:modelValue": updateModelValue
      } = props2;
      call(onClick, event);
      if (disabled || loading || readonly || (form == null ? void 0 : form.disabled.value) || (form == null ? void 0 : form.readonly.value)) {
        return;
      }
      const newValue = modelValue === activeValue ? inactiveValue : activeValue;
      call(onChange, newValue);
      call(updateModelValue, newValue);
      validateWithTrigger();
    }
    function hover(value) {
      if (props2.disabled || (form == null ? void 0 : form.disabled.value)) {
        return;
      }
      handleHovering(value);
    }
    function reset() {
      call(props2["onUpdate:modelValue"], props2.inactiveValue);
      resetValidation();
    }
    return {
      hovering,
      radius,
      styleComputed,
      errorMessage,
      formDisabled: form == null ? void 0 : form.disabled,
      formReadonly: form == null ? void 0 : form.readonly,
      n,
      classes,
      multiplySizeUnit,
      switchActive,
      hover
    };
  }
});
__sfc__.render = __render__;
var stdin_default = __sfc__;
export {
  stdin_default as default
};
