import VarFormDetails from "../form-details/index.mjs";
import { defineComponent, computed, watch, nextTick } from "vue";
import { props } from "./props.mjs";
import { useValidation, createNamespace } from "../utils/components.mjs";
import { useCheckboxes } from "./provide.mjs";
import { useForm } from "../form/provide.mjs";
import { uniq, call } from "@varlet/shared";
const { name, n, classes } = createNamespace("checkbox-group");
import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";
function __render__(_ctx, _cache) {
  const _component_var_form_details = _resolveComponent("var-form-details");
  return _openBlock(), _createElementBlock(
    "div",
    {
      class: _normalizeClass(_ctx.n("wrap"))
    },
    [
      _createElementVNode(
        "div",
        {
          class: _normalizeClass(_ctx.classes(_ctx.n(), _ctx.n(`--${_ctx.direction}`)))
        },
        [
          _renderSlot(_ctx.$slots, "default")
        ],
        2
        /* CLASS */
      ),
      _createVNode(_component_var_form_details, { "error-message": _ctx.errorMessage }, null, 8, ["error-message"])
    ],
    2
    /* CLASS */
  );
}
const __sfc__ = defineComponent({
  name,
  components: { VarFormDetails },
  props,
  setup(props2) {
    const max = computed(() => props2.max);
    const checkedCount = computed(() => props2.modelValue.length);
    const { length, checkboxes, bindCheckboxes } = useCheckboxes();
    const { bindForm } = useForm();
    const {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      // expose
      resetValidation
    } = useValidation();
    const checkboxGroupErrorMessage = computed(() => errorMessage.value);
    const checkboxGroupProvider = {
      max,
      checkedCount,
      onChecked,
      onUnchecked,
      validate,
      resetValidation,
      reset,
      errorMessage: checkboxGroupErrorMessage
    };
    watch(() => props2.modelValue, syncCheckboxes, { deep: true });
    watch(() => length.value, syncCheckboxes);
    bindCheckboxes(checkboxGroupProvider);
    call(bindForm, checkboxGroupProvider);
    function validateWithTrigger(trigger) {
      nextTick(() => {
        const { validateTrigger, rules, modelValue } = props2;
        vt(validateTrigger, trigger, rules, modelValue);
      });
    }
    function change(changedModelValue) {
      call(props2["onUpdate:modelValue"], changedModelValue);
      call(props2.onChange, changedModelValue);
      validateWithTrigger("onChange");
    }
    function onChecked(changedValue) {
      const { modelValue } = props2;
      if (!modelValue.includes(changedValue)) {
        change([...modelValue, changedValue]);
      }
    }
    function onUnchecked(changedValue) {
      const { modelValue } = props2;
      if (!modelValue.includes(changedValue)) {
        return;
      }
      change(modelValue.filter((value) => value !== changedValue));
    }
    function syncCheckboxes() {
      return checkboxes.forEach(({ sync }) => sync(props2.modelValue));
    }
    function resetWithAnimation() {
      checkboxes.forEach((checkbox) => checkbox.resetWithAnimation());
    }
    function checkAll() {
      const checkedValues = checkboxes.map(({ checkedValue }) => checkedValue.value);
      const changedModelValue = uniq(checkedValues);
      resetWithAnimation();
      call(props2["onUpdate:modelValue"], changedModelValue);
      return changedModelValue;
    }
    function inverseAll() {
      const checkedValues = checkboxes.filter(({ checked }) => !checked.value).map(({ checkedValue }) => checkedValue.value);
      const changedModelValue = uniq(checkedValues);
      resetWithAnimation();
      call(props2["onUpdate:modelValue"], changedModelValue);
      return changedModelValue;
    }
    function reset() {
      call(props2["onUpdate:modelValue"], []);
      resetValidation();
    }
    function validate() {
      return v(props2.rules, props2.modelValue);
    }
    return {
      errorMessage,
      n,
      classes,
      checkAll,
      inverseAll,
      reset,
      validate,
      resetValidation
    };
  }
});
__sfc__.render = __render__;
var stdin_default = __sfc__;
export {
  stdin_default as default
};
